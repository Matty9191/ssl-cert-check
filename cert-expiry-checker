#!/bin/bash

# path for config file
configPath=/config.json

# Global variables
certName=""
certPath=""
certType=""
certPass=""
expiryDaysLeft=""

# generate warn msg after alertWarnThreshold days
alertWarnThreshold=30
# generate error msg after alertWarnThreshold days
alertErrorThreshold=15
# rerun after reRunSec in seconds
rerunSec=86400


main() {
    usage $@
    while true
    do
        printMetricCertsExpiryHeader certs_expiry_check "certificatre expiry in days." gauge "${certName}" "ERROR" "$1" "${certPath}" ${expiryDaysLeft}
        readJson
        sleep ${rerunSec}
    done
}

printMetricCertsExpiryHeader {
    echo "# HELP $1 $2" > /proc/certinfo
    echo "# TYPE $1 $3" >> /proc/certinfo
}
printMetricCertsExpiryVaules {
    echo $1\{name=\"$4\",status=\"$5\",alias=\"$6\",path=\"$7\"\} $8 >> /proc/certinfo
}


readJson() {

    certsCount=`jq '.certs | length' ${configPath}`;
    for count in $(seq ${certsCount} $END);
    do 
        count=`expr $count - 1`
        certName=`jq -r .certs[${count}].name ${configPath}` 
        certPath=`jq -r .certs[${count}].path ${configPath}`
        certType=`jq -r .certs[${count}].type ${configPath}`
        certPass=`jq -r .certs[${count}].pass ${configPath}`
        if [ ${certType} == "PEM" ] 
        then
            checkPKI                
        elif [ ${certType} == "JKS" ]  || [ ${certType} == "PKCS12" ]
        then
            checkJKS
        else
            errorFormat
        fi
    done
}

checkPKI(){ 
    echo "PKI Certs check"
}


checkJKS(){ 
    keytool -list -storetype jks -keystore ${certPath} -storepass ${certPass} -v >> /dev/null
    errorFatal
    aliases=`keytool -list -storetype jks -keystore ${certPath} -storepass ${certPass} -v |grep "Alias name"|awk -F":" '{print $2}'`
    for alias in `echo ${aliases}`
    do
        expiryDate=`keytool -list -storetype jks -keystore ${certPath} -storepass ${certPass} -v -alias ${alias} |grep "Valid from:"|sed s/".*until:"//`
        checkExpiry "${expiryDate}" "${alias}"
    done
}

checkExpiry() {
    expiryDate=$1
    alias=$2
    expirySec=`date "+%s" -d "${expiryDate}"`
    currentSec=`date "+%s"`
    expiryDaysLeftSec=`expr ${expirySec} - ${currentSec}`
    expiryDaysLeft=`expr ${expiryDaysLeftSec} / 86400`
    if [ ${alertErrorThreshold} -ge ${expiryDaysLeft} ];
    then
        error ${alias}
    elif [ ${alertWarnThreshold} -ge ${expiryDaysLeft} ];
    then
        warning ${alias}
    else
        info ${alias}
    fi

}

error() {
    echo "ERROR: 101 | ${certName} | $1 |  ${certPath} | This cert will expire in ${expiryDaysLeft} days. !!! Renew ASAP !!!" >> /dev/stderr
    printMetricCertsExpiryVaules certs_expiry_check "certificatre expiry in days." gauge "${certName}" "ERROR" "$1" "${certPath}" ${expiryDaysLeft}
}


warning() {
    echo "WARN: 101 | ${certName} | $1 |  ${certPath} | This cert will expire in ${expiryDaysLeft} days. !!! Renew Soon !!!" >> /dev/stdout
    printMetricCertsExpiryVaules certs_expiry_check "certificatre expiry in days." gauge "${certName}" "WARN" "$1" "${certPath}" ${expiryDaysLeft}
}

info() {
    echo "INFO: 101 | ${certName} | $1 |  ${certPath} | This cert will expire in ${expiryDaysLeft} days. !!! All Good !!!" >> /dev/stdout
    printMetricCertsExpiryVaules certs_expiry_check "certificatre expiry in days." gauge "${certName}" "INFO" "$1" "${certPath}" ${expiryDaysLeft}
} 

errorFormat() {
    echo "ERROR: 102 | Format is not correct"
}

errorFatal() {
    if [ $? -ne 0 ];
    then
        echo "ERROR: 103 | ${certName} | NA |  ${certPath} | Not able to get certs information" >> /dev/stdout
        printMetricCertsExpiryVaules certs_expiry_check "certificatre expiry in days." gauge "${certName}" "FATAL" "NA" "${certPath}" 0
    fi   
}

usage() { 
    if [ $# -eq 2 ]; then
        if [ ${1} == '--config' ] && [ -f ${2} ]
        then
            configPath=${2}
        else
            echo "Usage: cert-expiry-checker --config <json-config-path>"
            exit 1
        fi
    fi
}



printMetric certs_expiry "certificatre expiry in days." gauge "test cert" "h-1" "/test/test.1" 1


main