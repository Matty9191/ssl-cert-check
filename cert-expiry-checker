#!/bin/bash

# path for config file
certsPath=/certs.json

# Global variables
certName=""
certPath=""
certType=""
certPass=""
expiryDaysLeft=""

# generate warn msg after alertWarnThreshold days
alertWarnThreshold=30
# generate error msg after alertWarnThreshold days
alertErrorThreshold=15
# rerun after reRunSec in seconds
rerunSec=86400

certsPath=/certs.json

main() {
    usage $@
    while true
    do
        readJson
        sleep ${rerunSec}
    done
}

readJson() {

    certsCount=`jq '.certs | length' ${certsPath}`;
    for count in $(seq ${certsCount} $END);
    do 
        count=`expr $count - 1`
        certName=`jq -r .certs[${count}].name ${certsPath}` 
        certPath=`jq -r .certs[${count}].path ${certsPath}`
        certType=`jq -r .certs[${count}].type ${certsPath}`
        certPass=`jq -r .certs[${count}].pass ${certsPath}`
        if [ ${certType} == "PEM" ] 
        then
            checkPKI                
        elif [ ${certType} == "JKS" ]  || [ ${certType} == "PKCS12" ]
        then
            checkJKS
        else
            errorFormat
        fi
    done
}

checkPKI(){ 
    echo "PKI Certs check"
}


checkJKS(){ 
    keytool -list -storetype jks -keystore ${certPath} -storepass ${certPass} -v >> /dev/null
    errorFatal
    aliases=`keytool -list -storetype jks -keystore ${certPath} -storepass ${certPass} -v |grep "Alias name"|awk -F":" '{print $2}'`
    for alias in `echo ${aliases}`
    do
        expiryDate=`keytool -list -storetype jks -keystore ${certPath} -storepass ${certPass} -v -alias ${alias} |grep "Valid from:"|sed s/".*until:"//`
        checkExpiry "${expiryDate}"
    done
}

checkExpiry() {
    expiryDate=$1
    expirySec=`date "+%s" -d "${expiryDate}"`
    currentSec=`date "+%s"`
    expiryDaysLeftSec=`expr ${expirySec} - ${currentSec}`
    expiryDaysLeft=`expr ${expiryDaysLeftSec} / 86400`
    if [ ${alertErrorThreshold} -ge ${expiryDaysLeft} ];
    then
        error        
    elif [ ${alertWarnThreshold} -ge ${expiryDaysLeft} ];
    then
        warning
    else
        info
    fi

}

error() {
    echo "ERROR: 101 | ${certName} | ${certPath} | This cert will expire in ${expiryDaysLeft} days. !!! Renew ASAP !!!" >> /dev/stderr
}


warning() {
    echo "WARN: 101 | ${certName} | ${certPath} | This cert will expire in ${expiryDaysLeft} days. !!! Renew Soon !!!" >> /dev/stdout
}

info() {
    echo "INFO: 101 | ${certName} | ${certPath} | This cert will expire in ${expiryDaysLeft} days. !!! All Good !!!" >> /dev/stdout
} 

errorFormat() {
    echo "ERROR: 102 | Format is not correct"
}

errorFatal() {
    if [ $? -ne 0 ];
    then
        echo "ERROR: 103 | ${certName} | ${certPath} | Not able to get certs information" >> /dev/stdout
    fi   
}

usage() { 
    if [ $# -eq 2 ]; then
        if [ ${1} == '--config' ] && [ -f ${2} ]
        then
            certsPath=${2}
        else
            echo "Usage: cert-expiry-checker --config <json-config-path>"
            exit 1
        fi
    fi
}


main